// Copyright CERN.
//
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package automount

import (
	"bufio"
	"bytes"
	"fmt"
	"os"
	goexec "os/exec"
	"os/signal"
	"syscall"

	"gitlab.cern.ch/kubernetes/storage/eosxd-csi/internal/exec"
	"gitlab.cern.ch/kubernetes/storage/eosxd-csi/internal/log"
)

type Opts struct {
	// Number of seconds of idle time after which an autofs-managed EOSxd
	// mount will be unmounted. Zero means never unmount.
	UnmountTimeoutSeconds int
}

func eosVersion() string {
	// `eos --version` exits with code 255, ignore errors.
	out, _ := exec.CombinedOutput(goexec.Command("eos", "--version"))

	return string(bytes.TrimSpace(out))
}

func setupAutofs(o *Opts) error {
	writeFmtFile := func(filepath, format string, fmtValues ...any) error {
		if err := os.WriteFile(filepath, []byte(fmt.Sprintf(format, fmtValues...)), 0644); err != nil {
			return fmt.Errorf("failed to write autofs configuration to %s: %v", filepath, err)
		}
		return nil
	}

	if err := writeFmtFile(
		"/etc/autofs.conf",
		`# Generated by automount-runner for eosxd CSI.
[ autofs ]
timeout = %d
`,
		o.UnmountTimeoutSeconds,
	); err != nil {
		return err
	}

	return nil
}

func Init(o *Opts) error {
	ver := eosVersion()
	log.Infof("%s", ver)

	if err := setupAutofs(o); err != nil {
		return err
	}

	return nil
}

func RunBlocking() error {
	args := []string{
		"--foreground",
	}

	if log.LevelEnabled(log.LevelDebug) {
		args = append(args, "--verbose")
	}

	if log.LevelEnabled(log.LevelTrace) {
		// automount passes -O options to the underlying fs mounts.
		// Enable eosxd debug logging.
		args = append(args, "-O", "debug", "--debug")
	}

	cmd := goexec.Command("automount", args...)

	// Set-up piping output for stdout and stderr to driver's logging.

	outp, err := cmd.StdoutPipe()
	if err != nil {
		return err
	}
	cmd.Stderr = cmd.Stdout

	// Run automount.

	scanner := bufio.NewScanner(outp)
	scanner.Split(bufio.ScanLines)

	go func() {
		for scanner.Scan() {
			log.Infof("automount[%d]: %s", cmd.Process.Pid, scanner.Text())
		}
	}()

	// Catch SIGTERM and SIGKILL and forward it to the automount process.

	sigCh := make(chan os.Signal, 2)
	defer close(sigCh)

	go func() {
		for {
			if sig, more := <-sigCh; more {
				cmd.Process.Signal(sig)
			} else {
				break
			}
		}
	}()

	shutdownSignals := []os.Signal{
		syscall.SIGINT,
		syscall.SIGTERM,
		syscall.SIGKILL,
	}

	signal.Notify(sigCh, shutdownSignals...)

	// Start automount daemon.

	log.Infof("Starting automount daemon prog=%s args=%v", cmd.Path, cmd.Args)
	if err := cmd.Start(); err != nil {
		return err
	}
	log.Infof("Started automount daemon PID %d", cmd.Process.Pid)

	// Wait until automount exits.

	cmd.Wait()

	if cmd.ProcessState.ExitCode() != 0 {
		log.Fatalf(fmt.Sprintf("automount[%d] has exited unexpectedly: %s", cmd.Process.Pid, cmd.ProcessState))
	}

	log.Infof("automount[%d] has exited: %s", cmd.Process.Pid, cmd.ProcessState)

	return nil
}

func IsAutofs(path string) (bool, error) {
	const fsType = 0x187

	statfs := syscall.Statfs_t{}
	err := syscall.Statfs(path, &statfs)
	if err != nil {
		return false, err
	}

	return statfs.Type == fsType, nil
}
